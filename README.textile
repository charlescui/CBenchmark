http://cuiz.me/cbenchmark/2011/07/cbenchmarkjieshao/

h1. 介绍：

h2. CBenchmark---<b>C</b>harlesCui's Benchmark

本产品是为了解决性能测试压力生成的问题.

h2. 系统|Platform

在对服务端系统进行性能测试时，目前成熟的解决方案是使用windows系统下LoadRunner等系列产品，而无法找到功能强大的Linux系统下的产品。
本程序目前支持Linux系统，并且理论可以实现跨平台编译（作者并没有实验过，但本产品并没有依赖特定系统的库或者函数）.

h2. 特点|Feature

* 本程序和当前性能测试解决方案相比，
## 可以实现极高的定制化:开放所有API,用户可以基于这些API实现自己的性能测试工具.
## 无限制:本产品完全免费，不会像现有成熟解决方案一样基于并发数,或者基于使用协议的Lisense限制。
## 高性能高并发:可提供比现有产品高出很多的并发能力,本程序使用C语言实现所有的代码。
## 通用性:由于本产品测试用例的业务实现是由客户完成，所以本产品的作用不限于某种测试协议,所以本产品是一个通用的性能测试工具.
## 执行过程可控:测试执行过程中用户可以通过Ctrl+C来控制本产品的执行。
## 特有的测试用例加载模式:对测试用例加载的模式和市面上的性能测试产品都不一样，用户可以将CBenchmark当做第三方库编码进入测试代码,也可以将CBenchmark当做工具,在执行的时候动态加载测试代码以产生压力.

本产品理论支持所有的服务端性能测试。
对于非标准协议的性能测试，我推荐您使用本产品。

h2. 安装过程

<pre><code>
./configure --prefix=/opt/cbenchmark
make
make install
</code></pre>

h2. 安装后产生文件 

* 本程序内容如下：
## bin/cbenchmark
## include/*.h

h2. TODO

h3. 报表

* 目前本产品提供的测试结果有两种：
## 执行完毕后的文字提示
## 执行完毕后的日志
作者在未来会提供报表生成工具，
但不会集成在本产品中，这是为了保证本产品的干净，高效。
并且在没有桌面的linux端使用本产品执行性能测试，
测试结果的显示手段有限，所以我不建议集成在本工具里。
而是最好用其他工具实现，这样也可以完成分布式性能测试的图表结果展现。

h2. 使用方法|Usage

请执行bin/cbenchmark -?

<pre><code>
[zheng.cuizh@localhost cbenchmark]$ /usr/local/cbenchmark/bin/cbenchmark -?
        CharlesCui's Benchmark
                help you do performance test nice.
-o ["Shell command"]
-f [Output result path]
-F [Dynamic lib path.]
-n [Each thread iterations times]
-c [Concurrence NUM]
-l [Syslog level]
-g [Syslog name,less than 128 char]
-v [Show -o stdoutput]
-t [Selftest]
-x [Scenario id]
-T [Timmer(seconds)].
-s [Select a scenario from list]
</code></pre>

h2. 作者|Author

gtalk/gmail zheng.cuizh@gmail.com

h2. 用例|Example

./features目录下面是测试插件,目前还没有完善,现在只实现了ice的测试demo.因为我一直用cbenchmark测试私有协议以及一部分ice协议,私有协议的测试demo不方便公开,而ice协议的测试demo完全可以给大家借鉴.

h3. ICE测试

如果大家不了解ice,可以在这里学习一下:http://www.zeroc.com/
demo位于./features/ice下,几乎所有的ice协议测试都可以用这个框架改一改就行.

* ice测试用例的组成
## main.c 该文件为ice测试用例库的入口程序,根据cbenchmark加载测试用例库的约定,该文件实现了一个initialize函数,该函数可以调度测试的执行,比如提供选择要执行的测试场景等功能,可由用户定制.
## main.h 该文件包含了cbenchmark的头文件,以及若干工具文件,同时声明了main.c中的函数定义.
## mos_perf_test.cpp 该文件包含了mos模块ice接口的测试代码,通过将mos_init函数中实现的ice实例:mos传递给pVuser->verb指针,从而可以让真正实现压力请求的函数:mos_getUserStatus,mos_getUserCount得到该对象的引用,以访问checkcast后得到的MOSInterfacePrx对象.注意new的使用.
## mos_perf_test.h 该文件包含了mos_perf_test.cpp实现的ice连接建立/释放函数(mos_init(),mos_end()),以及测试方法(mos_getUserStatus,mos_getUserCount).

关于main.c
<pre><code>
                                pmw->script.init = mos_init;
                                pmw->script.act = mos_getUserCount;
                                pmw->script.end = mos_end;
</code></pre>
这是测试mos_getUserCount函数的场景.

* 基本的测试思路是:
## mos_init函数实现初始化,比如ice协议就是建立连接,并将代理类放到堆中并将指针传递给pVuser->verb或者它指向的某个结构,
## mos_getUserCount函数实现迭代的测试,也就是在测试过程中,CBenchmark会不断执行该函数已产生业务上的请求,
## mos_end函数实现释放链接操作.

不管怎样的协议的性能测试,思路如出一辙,你只需按照上面的三条完成业务代码的编写,CBenchmark就会帮助你把这个业务逻辑变成高并发高频率的请求,这样会瞬间给服务端带来极大的压力,从而测试服务器的抗压性.

h2. TODO

这个用例是我在测试工作中积累的数十个测试场景里挑选出来的,已经非常的简单了,但要了解cbenchmark的工作原理,还是需要再阅读更多的关于cbenchmark的文档,我会陆续放出.

