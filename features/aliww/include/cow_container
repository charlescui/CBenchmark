#ifndef _COW_CONTAINER_
#define _COW_CONTAINER_

#ifdef _WIN32
#include <intrin.h>
#else
#include <bits/atomicity.h>
#endif
#include <vector>
#include <list>
#include <deque>

using namespace __gnu_cxx;
template<typename _Tp>
class cow_struct
{
public:
  cow_struct()
  {
    m_pCowNode = new cow_node;
    m_pCowNode->m_refCount = 0;
  }
  cow_struct(const cow_struct& __cc)
  {
    m_pCowNode = __cc.m_pCowNode;
#ifdef _WIN32
    _InterlockedIncrement(&m_pCowNode->m_refCount);
#else
    __atomic_add(&m_pCowNode->m_refCount, 1);
#endif
  }
  cow_struct(const _Tp& __cc)
  {
    m_pCowNode = new cow_node;
    m_pCowNode->m_refCount = 0;
    m_pCowNode->m_data = __cc;
  }
  ~cow_struct()
  {
#ifdef _WIN32
    if(_InterlockedDecrement(&m_pCowNode->m_refCount) < 0)
#else
    if(__exchange_and_add(&m_pCowNode->m_refCount, -1) <= 0)
#endif
        delete m_pCowNode;
  }
  cow_struct &operator=(const cow_struct& __cc)
  {
    if(m_pCowNode != __cc.m_pCowNode) {
#ifdef _WIN32
        if(_InterlockedDecrement(&m_pCowNode->m_refCount) < 0)
#else
        if(__exchange_and_add(&m_pCowNode->m_refCount, -1) <= 0)
#endif
            delete m_pCowNode;
      m_pCowNode = __cc.m_pCowNode;
#ifdef _WIN32
      _InterlockedIncrement(&m_pCowNode->m_refCount);
#else
      __atomic_add(&m_pCowNode->m_refCount, 1);
#endif
    }
    return *this;
  }
  cow_struct &operator=(const _Tp& __cc)
  {
#ifdef _WIN32
    if(_InterlockedDecrement(&m_pCowNode->m_refCount) < 0)
#else
    if(__exchange_and_add(&m_pCowNode->m_refCount, -1) <= 0)
#endif
        delete m_pCowNode;
    m_pCowNode = new cow_node;
    m_pCowNode->m_refCount = 0;
    m_pCowNode->m_data = __cc;
    return *this;
  }
  const _Tp& data() const
  {
    return m_pCowNode->m_data;
  }
protected:
  struct cow_node
  {
#ifdef _WIN32
      long       m_refCount;
#else
      int        m_refCount;
#endif
      _Tp        m_data;
  };
  cow_node       *m_pCowNode;
protected:
  void do_copy()
  {
    if(m_pCowNode->m_refCount > 0)
    {
        cow_node* newNode = new cow_node;
        newNode->m_refCount = 0;
        newNode->m_data = m_pCowNode->m_data;
#ifdef _WIN32
      if(_InterlockedDecrement(&m_pCowNode->m_refCount) < 0)
#else
      if(__exchange_and_add(&m_pCowNode->m_refCount, -1) <= 0)
#endif
        delete m_pCowNode;
      m_pCowNode = newNode;
    }
  }
};

template<typename _Tp>
class cow_container : public cow_struct<_Tp>
{
protected:
  typedef cow_struct<_Tp>  _BaseStruct;
  using _BaseStruct::do_copy;
  using _BaseStruct::m_pCowNode;

public:
  typedef typename _Tp::value_type               value_type;
  typedef typename _Tp::reference                reference;
  typedef typename _Tp::const_reference          const_reference;
  typedef typename _Tp::iterator                 iterator;
  typedef typename _Tp::const_iterator           const_iterator;
  typedef typename _Tp::size_type                size_type;
  typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
  typedef std::reverse_iterator<iterator>        reverse_iterator;
  typedef typename _BaseStruct::cow_node         cow_node;

  using _BaseStruct::operator=;

  cow_container() : cow_struct<_Tp>() { };
  cow_container(const _Tp& _v)
  {
    *this = _v;
  }
  cow_container(const_iterator _begin, const_iterator _end)
  {
    m_pCowNode = new cow_node;
    m_pCowNode->m_refCount = 0;
    const_iterator itr;
    for(itr = _begin(); itr != _end; ++itr) {
      m_pCowNode->m_data.push_back(*itr);
    }
  }
  cow_container(const_iterator _begin, size_t _n)
  {
    m_pCowNode = new cow_node;
    m_pCowNode->m_refCount = 0;
    const_iterator itr;
    for(itr = _begin(); itr < _begin + _n; ++itr) {
      m_pCowNode->m_data.push_back(*itr);
    }
  }
  const_iterator begin() const
  {
    return m_pCowNode->m_data.begin();
  }
  const_iterator end() const
  {
    return m_pCowNode->m_data.end();
  }
  const_iterator cbegin() const
  {
    return m_pCowNode->m_data.begin();
  }
  const_iterator cend() const
  {
    return m_pCowNode->m_data.end();
  }
  const_reverse_iterator rbegin() const
  {
    return m_pCowNode->m_data.rbegin();
  }
  const_reverse_iterator rend() const
  {
    return m_pCowNode->m_data.rend();
  }
  const_reverse_iterator crbegin()
  {
    return m_pCowNode->m_data.rbegin();
  }
  const_reverse_iterator crend()
  {
    return m_pCowNode->m_data.rend();
  }
  iterator begin()
  {
    do_copy();
    return m_pCowNode->m_data.begin();
  }
  iterator end()
  {
    do_copy();
    return m_pCowNode->m_data.end();
  }
  reverse_iterator rbegin()
  {
    do_copy();
    return m_pCowNode->m_data.rbegin();
  }
  reverse_iterator rend()
  {
    do_copy();
    return m_pCowNode->m_data.rend();
  }
  bool empty() const
  {
    return m_pCowNode->m_data.empty();
  }
  size_type size() const
  {
    return m_pCowNode->m_data.size();
  }
  const_reference front() const
  {
    return m_pCowNode->m_data.front();
  }
  const_reference back() const
  {
    return m_pCowNode->m_data.back();
  }
  const_reference cfront() const
  {
    return m_pCowNode->m_data.front();
  }
  const_reference cback() const
  {
    return m_pCowNode->m_data.back();
  }
  reference front()
  {
    do_copy();
    return m_pCowNode->m_data.front();
  }
  reference back()
  {
    do_copy();
    return m_pCowNode->m_data.back();
  }
  void push_back(const value_type& _val)
  {
    do_copy();
    m_pCowNode->m_data.push_back(_val);
  }
  void pop_back()
  {
    do_copy();
    m_pCowNode->m_data.pop_back();
  }
  iterator insert(iterator __position, const value_type& __x)
  {
    do_copy();
    return m_pCowNode->m_data.insert(__position, __x);
  }
  iterator insert(iterator __position, const_iterator __first, const_iterator __last)
  {
    do_copy();
    return m_pCowNode->m_data.insert(__position, __first, __last);
  }
  iterator erase(iterator __position)
  {
    do_copy();
    return m_pCowNode->m_data.erase(__position);
  }
  iterator erase(iterator __first, iterator __last)
  {
    do_copy();
    return m_pCowNode->m_data.erase(__first, __last);
  }
  void clear()
  {
    do_copy();
    m_pCowNode->m_data.clear();
  }
};

template<class _Tp>
class VECTOR : public cow_container< std::vector<_Tp> > 
{
  typedef _Tp&                    reference;
  typedef const _Tp&              const_reference;
  typedef typename std::vector<_Tp>::size_type size_type;
  using cow_container< std::vector<_Tp> >::m_pCowNode;
  using cow_container< std::vector<_Tp> >::do_copy;

public:
  using cow_container< std::vector<_Tp> >::operator=;
  VECTOR<_Tp>() : cow_container< std::vector<_Tp> >() { }
  VECTOR<_Tp> (const std::vector<_Tp>& _v)
  {
    *this = _v;
  }
  const_reference operator[](size_type _n) const
  {
    return m_pCowNode->m_data[_n];
  }
  reference operator[](size_type _n)
  {
    do_copy();
    return m_pCowNode->m_data[_n];
  }
  void reserve(size_type _n)
  {
    do_copy();
    m_pCowNode->m_data.reserve(_n);
  }
  void resize(size_type _n)
  {
    do_copy();
    m_pCowNode->m_data.resize(_n);
  }
};

template<class _Tp>
class CLIST : public cow_container< std::list<_Tp> >
{
  typedef _Tp&                reference;
  typedef const _Tp&          const_reference;
  using cow_container< std::list<_Tp> >::m_pCowNode;
  using cow_container< std::list<_Tp> >::do_copy;
public:
  using cow_container< std::list<_Tp> >::operator=;
  CLIST<_Tp>() : cow_container< std::list<_Tp> >() { }
  CLIST<_Tp> (const std::list<_Tp>& _v)
  {
    *this = _v;
  }

  void push_front(const_reference _val)
  {
    do_copy();
    m_pCowNode->m_data.push_front(_val);
  }
  void pop_front()
  {
    do_copy();
    m_pCowNode->m_data.pop_front();
  }
};

template<class _Tp>
class CDEQUE : public cow_container< std::deque<_Tp> > 
{
  typedef _Tp&                    reference;
  typedef const _Tp&              const_reference;
  typedef typename std::deque<_Tp>::size_type size_type;
  using cow_container< std::deque<_Tp> >::m_pCowNode;
  using cow_container< std::deque<_Tp> >::do_copy;

public:
  using cow_container< std::deque<_Tp> >::operator=;
  CDEQUE<_Tp>() : cow_container< std::deque<_Tp> >() { }
  CDEQUE<_Tp> (const std::deque<_Tp>& _v)
  {
    *this = _v;
  }
  const_reference operator[](size_type _n) const
  {
    return m_pCowNode->m_data[_n];
  }
  reference operator[](size_type _n)
  {
    do_copy();
    return m_pCowNode->m_data[_n];
  }

  void push_front(const_reference _val)
  {
    do_copy();
    m_pCowNode->m_data.push_front(_val);
  }
  void pop_front()
  {
    do_copy();
    m_pCowNode->m_data.pop_front();
  }
  void resize(size_type _n)
  {
    do_copy();
    m_pCowNode->m_data.resize(_n);
  }
};

#endif

