//Sofware DES functions
//written 12 Dec 1986 by Phil Karn, KA9Q; large sections adapted from
//the 1977 public-domain program by Jim Gillogly

#include <stdlib.h> 
#ifdef _WIN32
#include <WINSOCK.H>
#else
#include <netinet/in.h>
#endif
#include "des.h"

//initial permutation IP
#if 0
static char ip[] = {
    58, 50, 42, 34, 26, 18, 10,  2,
    60, 52, 44, 36, 28, 20, 12,  4,
    62, 54, 46, 38, 30, 22, 14,  6,
    64, 56, 48, 40, 32, 24, 16,  8,
    57, 49, 41, 33, 25, 17,  9,  1,
    59, 51, 43, 35, 27, 19, 11,  3,
    61, 53, 45, 37, 29, 21, 13,  5,
    63, 55, 47, 39, 31, 23, 15,  7
};
#endif

//final permutation IP^-1
#if 0
static char fp[] = {
    40,  8, 48, 16, 56, 24, 64, 32,
    39,  7, 47, 15, 55, 23, 63, 31,
    38,  6, 46, 14, 54, 22, 62, 30,
    37,  5, 45, 13, 53, 21, 61, 29,
    36,  4, 44, 12, 52, 20, 60, 28,
    35,  3, 43, 11, 51, 19, 59, 27,
    34,  2, 42, 10, 50, 18, 58, 26,
    33,  1, 41,  9, 49, 17, 57, 25
};
#endif

//permuted choice table (key)
static char pc1[] = {
    57, 49, 41, 33, 25, 17,  9,
     1, 58, 50, 42, 34, 26, 18,
    10,  2, 59, 51, 43, 35, 27,
    19, 11,  3, 60, 52, 44, 36,

    63, 55, 47, 39, 31, 23, 15,
     7, 62, 54, 46, 38, 30, 22,
    14,  6, 61, 53, 45, 37, 29,
    21, 13,  5, 28, 20, 12,  4
};

//number left rotations of pc1
static char totrot[] = {
    1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28
};

//permuted choice key (table)
static char pc2[] = {
    14, 17, 11, 24,  1,  5,
     3, 28, 15,  6, 21, 10,
    23, 19, 12,  4, 26,  8,
    16,  7, 27, 20, 13,  2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
};

//The (in)famous S-boxes
#if 0
static char si[8][64] = {
    //S1
    {14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7,
     0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8,
     4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0,
    15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13},

    //S2
    {15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10,
     3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5,
     0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15,
    13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9},

    //S3
    {10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8,
    13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1,
    13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7,
     1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12},

    //S4
    {7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15,
    13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9,
    10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4,
     3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14},

    //S5
    {2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9,
    14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6,
     4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14,
    11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3},

    //S6
    {12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11,
    10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8,
     9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6,
     4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13},

    //S7
    {4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1,
    13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6,
     1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2,
     6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12},

    //S8
    {13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7,
     1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2,
     7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8,
     2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11}
};
#endif

//32-bit permutation function P used on the output of the S-boxes
#if 0
static char p32i[] = {    
    16,  7, 20, 21,
    29, 12, 28, 17,
     1, 15, 23, 26,
     5, 18, 31, 10,
     2,  8, 24, 14,
    32, 27,  3,  9,
    19, 13, 30,  6,
    22, 11,  4, 25
};
#endif
//End of DES-defined tables

//Lookup tables initialized once only at startup by desinit()
static int sp_[8][64]=     //Combined S and P boxes
{
{0x00808200, 0x00000000, 0x00008000, 0x00808202, 0x00808002, 0x00008202, 0x00000002, 0x00008000, 0x00000200, 0x00808200, 0x00808202, 0x00000200, 0x00800202, 0x00808002, 0x00800000, 0x00000002, 0x00000202, 0x00800200, 0x00800200, 0x00008200, 0x00008200, 0x00808000, 0x00808000, 0x00800202, 0x00008002, 0x00800002, 0x00800002, 0x00008002, 0x00000000, 0x00000202, 0x00008202, 0x00800000, 0x00008000, 0x00808202, 0x00000002, 0x00808000, 0x00808200, 0x00800000, 0x00800000, 0x00000200, 0x00808002, 0x00008000, 0x00008200, 0x00800002, 0x00000200, 0x00000002, 0x00800202, 0x00008202, 0x00808202, 0x00008002, 0x00808000, 0x00800202, 0x00800002, 0x00000202, 0x00008202, 0x00808200, 0x00000202, 0x00800200, 0x00800200, 0x00000000, 0x00008002, 0x00008200, 0x00000000, 0x00808002},
{0x40084010, 0x40004000, 0x00004000, 0x00084010, 0x00080000, 0x00000010, 0x40080010, 0x40004010, 0x40000010, 0x40084010, 0x40084000, 0x40000000, 0x40004000, 0x00080000, 0x00000010, 0x40080010, 0x00084000, 0x00080010, 0x40004010, 0x00000000, 0x40000000, 0x00004000, 0x00084010, 0x40080000, 0x00080010, 0x40000010, 0x00000000, 0x00084000, 0x00004010, 0x40084000, 0x40080000, 0x00004010, 0x00000000, 0x00084010, 0x40080010, 0x00080000, 0x40004010, 0x40080000, 0x40084000, 0x00004000, 0x40080000, 0x40004000, 0x00000010, 0x40084010, 0x00084010, 0x00000010, 0x00004000, 0x40000000, 0x00004010, 0x40084000, 0x00080000, 0x40000010, 0x00080010, 0x40004010, 0x40000010, 0x00080010, 0x00084000, 0x00000000, 0x40004000, 0x00004010, 0x40000000, 0x40080010, 0x40084010, 0x00084000},
{0x00000104, 0x04010100, 0x00000000, 0x04010004, 0x04000100, 0x00000000, 0x00010104, 0x04000100, 0x00010004, 0x04000004, 0x04000004, 0x00010000, 0x04010104, 0x00010004, 0x04010000, 0x00000104, 0x04000000, 0x00000004, 0x04010100, 0x00000100, 0x00010100, 0x04010000, 0x04010004, 0x00010104, 0x04000104, 0x00010100, 0x00010000, 0x04000104, 0x00000004, 0x04010104, 0x00000100, 0x04000000, 0x04010100, 0x04000000, 0x00010004, 0x00000104, 0x00010000, 0x04010100, 0x04000100, 0x00000000, 0x00000100, 0x00010004, 0x04010104, 0x04000100, 0x04000004, 0x00000100, 0x00000000, 0x04010004, 0x04000104, 0x00010000, 0x04000000, 0x04010104, 0x00000004, 0x00010104, 0x00010100, 0x04000004, 0x04010000, 0x04000104, 0x00000104, 0x04010000, 0x00010104, 0x00000004, 0x04010004, 0x00010100},
{0x80401000, 0x80001040, 0x80001040, 0x00000040, 0x00401040, 0x80400040, 0x80400000, 0x80001000, 0x00000000, 0x00401000, 0x00401000, 0x80401040, 0x80000040, 0x00000000, 0x00400040, 0x80400000, 0x80000000, 0x00001000, 0x00400000, 0x80401000, 0x00000040, 0x00400000, 0x80001000, 0x00001040, 0x80400040, 0x80000000, 0x00001040, 0x00400040, 0x00001000, 0x00401040, 0x80401040, 0x80000040, 0x00400040, 0x80400000, 0x00401000, 0x80401040, 0x80000040, 0x00000000, 0x00000000, 0x00401000, 0x00001040, 0x00400040, 0x80400040, 0x80000000, 0x80401000, 0x80001040, 0x80001040, 0x00000040, 0x80401040, 0x80000040, 0x80000000, 0x00001000, 0x80400000, 0x80001000, 0x00401040, 0x80400040, 0x80001000, 0x00001040, 0x00400000, 0x80401000, 0x00000040, 0x00400000, 0x00001000, 0x00401040},
{0x00000080, 0x01040080, 0x01040000, 0x21000080, 0x00040000, 0x00000080, 0x20000000, 0x01040000, 0x20040080, 0x00040000, 0x01000080, 0x20040080, 0x21000080, 0x21040000, 0x00040080, 0x20000000, 0x01000000, 0x20040000, 0x20040000, 0x00000000, 0x20000080, 0x21040080, 0x21040080, 0x01000080, 0x21040000, 0x20000080, 0x00000000, 0x21000000, 0x01040080, 0x01000000, 0x21000000, 0x00040080, 0x00040000, 0x21000080, 0x00000080, 0x01000000, 0x20000000, 0x01040000, 0x21000080, 0x20040080, 0x01000080, 0x20000000, 0x21040000, 0x01040080, 0x20040080, 0x00000080, 0x01000000, 0x21040000, 0x21040080, 0x00040080, 0x21000000, 0x21040080, 0x01040000, 0x00000000, 0x20040000, 0x21000000, 0x00040080, 0x01000080, 0x20000080, 0x00040000, 0x00000000, 0x20040000, 0x01040080, 0x20000080},
{0x10000008, 0x10200000, 0x00002000, 0x10202008, 0x10200000, 0x00000008, 0x10202008, 0x00200000, 0x10002000, 0x00202008, 0x00200000, 0x10000008, 0x00200008, 0x10002000, 0x10000000, 0x00002008, 0x00000000, 0x00200008, 0x10002008, 0x00002000, 0x00202000, 0x10002008, 0x00000008, 0x10200008, 0x10200008, 0x00000000, 0x00202008, 0x10202000, 0x00002008, 0x00202000, 0x10202000, 0x10000000, 0x10002000, 0x00000008, 0x10200008, 0x00202000, 0x10202008, 0x00200000, 0x00002008, 0x10000008, 0x00200000, 0x10002000, 0x10000000, 0x00002008, 0x10000008, 0x10202008, 0x00202000, 0x10200000, 0x00202008, 0x10202000, 0x00000000, 0x10200008, 0x00000008, 0x00002000, 0x10200000, 0x00202008, 0x00002000, 0x00200008, 0x10002008, 0x00000000, 0x10202000, 0x10000000, 0x00200008, 0x10002008},
{0x00100000, 0x02100001, 0x02000401, 0x00000000, 0x00000400, 0x02000401, 0x00100401, 0x02100400, 0x02100401, 0x00100000, 0x00000000, 0x02000001, 0x00000001, 0x02000000, 0x02100001, 0x00000401, 0x02000400, 0x00100401, 0x00100001, 0x02000400, 0x02000001, 0x02100000, 0x02100400, 0x00100001, 0x02100000, 0x00000400, 0x00000401, 0x02100401, 0x00100400, 0x00000001, 0x02000000, 0x00100400, 0x02000000, 0x00100400, 0x00100000, 0x02000401, 0x02000401, 0x02100001, 0x02100001, 0x00000001, 0x00100001, 0x02000000, 0x02000400, 0x00100000, 0x02100400, 0x00000401, 0x00100401, 0x02100400, 0x00000401, 0x02000001, 0x02100401, 0x02100000, 0x00100400, 0x00000000, 0x00000001, 0x02100401, 0x00000000, 0x00100401, 0x02100000, 0x00000400, 0x02000001, 0x02000400, 0x00000400, 0x00100001},
{0x08000820, 0x00000800, 0x00020000, 0x08020820, 0x08000000, 0x08000820, 0x00000020, 0x08000000, 0x00020020, 0x08020000, 0x08020820, 0x00020800, 0x08020800, 0x00020820, 0x00000800, 0x00000020, 0x08020000, 0x08000020, 0x08000800, 0x00000820, 0x00020800, 0x00020020, 0x08020020, 0x08020800, 0x00000820, 0x00000000, 0x00000000, 0x08020020, 0x08000020, 0x08000800, 0x00020820, 0x00020000, 0x00020820, 0x00020000, 0x08020800, 0x00000800, 0x00000020, 0x08020020, 0x00000800, 0x00020820, 0x08000800, 0x00000020, 0x08000020, 0x08020000, 0x08020020, 0x08000000, 0x00020000, 0x08000820, 0x00000000, 0x08020820, 0x00020020, 0x08000020, 0x08020000, 0x08000800, 0x08000820, 0x00000000, 0x08020820, 0x00020800, 0x00020800, 0x00000820, 0x00000820, 0x00020020, 0x08000000, 0x08020800},

};

static unsigned char iperm[16][16][8]=    //Initial and final permutations
{
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 0},
        {0, 1, 0, 0, 0, 1, 0, 0},
        {1, 0, 0, 0, 0, 0, 0, 0},
        {1, 1, 0, 0, 0, 0, 0, 0},
        {1, 0, 0, 0, 0, 1, 0, 0},
        {1, 1, 0, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, 1, 0, 0, 0},
        {0, 1, 0, 0, 1, 0, 0, 0},
        {0, 0, 0, 0, 1, 1, 0, 0},
        {0, 1, 0, 0, 1, 1, 0, 0},
        {1, 0, 0, 0, 1, 0, 0, 0},
        {1, 1, 0, 0, 1, 0, 0, 0},
        {1, 0, 0, 0, 1, 1, 0, 0},
        {1, 1, 0, 0, 1, 1, 0, 0}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 1},
        {0, 0, 0, 1, 0, 0, 0, 1},
        {0, 0, 1, 0, 0, 0, 0, 0},
        {0, 0, 1, 1, 0, 0, 0, 0},
        {0, 0, 1, 0, 0, 0, 0, 1},
        {0, 0, 1, 1, 0, 0, 0, 1},
        {0, 0, 0, 0, 0, 0, 1, 0},
        {0, 0, 0, 1, 0, 0, 1, 0},
        {0, 0, 0, 0, 0, 0, 1, 1},
        {0, 0, 0, 1, 0, 0, 1, 1},
        {0, 0, 1, 0, 0, 0, 1, 0},
        {0, 0, 1, 1, 0, 0, 1, 0},
        {0, 0, 1, 0, 0, 0, 1, 1},
        {0, 0, 1, 1, 0, 0, 1, 1}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 2, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 0},
        {0, 2, 0, 0, 0, 2, 0, 0},
        {2, 0, 0, 0, 0, 0, 0, 0},
        {2, 2, 0, 0, 0, 0, 0, 0},
        {2, 0, 0, 0, 0, 2, 0, 0},
        {2, 2, 0, 0, 0, 2, 0, 0},
        {0, 0, 0, 0, 2, 0, 0, 0},
        {0, 2, 0, 0, 2, 0, 0, 0},
        {0, 0, 0, 0, 2, 2, 0, 0},
        {0, 2, 0, 0, 2, 2, 0, 0},
        {2, 0, 0, 0, 2, 0, 0, 0},
        {2, 2, 0, 0, 2, 0, 0, 0},
        {2, 0, 0, 0, 2, 2, 0, 0},
        {2, 2, 0, 0, 2, 2, 0, 0}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 2, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 2},
        {0, 0, 0, 2, 0, 0, 0, 2},
        {0, 0, 2, 0, 0, 0, 0, 0},
        {0, 0, 2, 2, 0, 0, 0, 0},
        {0, 0, 2, 0, 0, 0, 0, 2},
        {0, 0, 2, 2, 0, 0, 0, 2},
        {0, 0, 0, 0, 0, 0, 2, 0},
        {0, 0, 0, 2, 0, 0, 2, 0},
        {0, 0, 0, 0, 0, 0, 2, 2},
        {0, 0, 0, 2, 0, 0, 2, 2},
        {0, 0, 2, 0, 0, 0, 2, 0},
        {0, 0, 2, 2, 0, 0, 2, 0},
        {0, 0, 2, 0, 0, 0, 2, 2},
        {0, 0, 2, 2, 0, 0, 2, 2}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 4, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 4, 0, 0},
        {0, 4, 0, 0, 0, 4, 0, 0},
        {4, 0, 0, 0, 0, 0, 0, 0},
        {4, 4, 0, 0, 0, 0, 0, 0},
        {4, 0, 0, 0, 0, 4, 0, 0},
        {4, 4, 0, 0, 0, 4, 0, 0},
        {0, 0, 0, 0, 4, 0, 0, 0},
        {0, 4, 0, 0, 4, 0, 0, 0},
        {0, 0, 0, 0, 4, 4, 0, 0},
        {0, 4, 0, 0, 4, 4, 0, 0},
        {4, 0, 0, 0, 4, 0, 0, 0},
        {4, 4, 0, 0, 4, 0, 0, 0},
        {4, 0, 0, 0, 4, 4, 0, 0},
        {4, 4, 0, 0, 4, 4, 0, 0}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 4, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 4},
        {0, 0, 0, 4, 0, 0, 0, 4},
        {0, 0, 4, 0, 0, 0, 0, 0},
        {0, 0, 4, 4, 0, 0, 0, 0},
        {0, 0, 4, 0, 0, 0, 0, 4},
        {0, 0, 4, 4, 0, 0, 0, 4},
        {0, 0, 0, 0, 0, 0, 4, 0},
        {0, 0, 0, 4, 0, 0, 4, 0},
        {0, 0, 0, 0, 0, 0, 4, 4},
        {0, 0, 0, 4, 0, 0, 4, 4},
        {0, 0, 4, 0, 0, 0, 4, 0},
        {0, 0, 4, 4, 0, 0, 4, 0},
        {0, 0, 4, 0, 0, 0, 4, 4},
        {0, 0, 4, 4, 0, 0, 4, 4}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 8, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 8, 0, 0},
        {0, 8, 0, 0, 0, 8, 0, 0},
        {8, 0, 0, 0, 0, 0, 0, 0},
        {8, 8, 0, 0, 0, 0, 0, 0},
        {8, 0, 0, 0, 0, 8, 0, 0},
        {8, 8, 0, 0, 0, 8, 0, 0},
        {0, 0, 0, 0, 8, 0, 0, 0},
        {0, 8, 0, 0, 8, 0, 0, 0},
        {0, 0, 0, 0, 8, 8, 0, 0},
        {0, 8, 0, 0, 8, 8, 0, 0},
        {8, 0, 0, 0, 8, 0, 0, 0},
        {8, 8, 0, 0, 8, 0, 0, 0},
        {8, 0, 0, 0, 8, 8, 0, 0},
        {8, 8, 0, 0, 8, 8, 0, 0}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 8, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 8},
        {0, 0, 0, 8, 0, 0, 0, 8},
        {0, 0, 8, 0, 0, 0, 0, 0},
        {0, 0, 8, 8, 0, 0, 0, 0},
        {0, 0, 8, 0, 0, 0, 0, 8},
        {0, 0, 8, 8, 0, 0, 0, 8},
        {0, 0, 0, 0, 0, 0, 8, 0},
        {0, 0, 0, 8, 0, 0, 8, 0},
        {0, 0, 0, 0, 0, 0, 8, 8},
        {0, 0, 0, 8, 0, 0, 8, 8},
        {0, 0, 8, 0, 0, 0, 8, 0},
        {0, 0, 8, 8, 0, 0, 8, 0},
        {0, 0, 8, 0, 0, 0, 8, 8},
        {0, 0, 8, 8, 0, 0, 8, 8}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 16, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 16, 0, 0},
        {0, 16, 0, 0, 0, 16, 0, 0},
        {16, 0, 0, 0, 0, 0, 0, 0},
        {16, 16, 0, 0, 0, 0, 0, 0},
        {16, 0, 0, 0, 0, 16, 0, 0},
        {16, 16, 0, 0, 0, 16, 0, 0},
        {0, 0, 0, 0, 16, 0, 0, 0},
        {0, 16, 0, 0, 16, 0, 0, 0},
        {0, 0, 0, 0, 16, 16, 0, 0},
        {0, 16, 0, 0, 16, 16, 0, 0},
        {16, 0, 0, 0, 16, 0, 0, 0},
        {16, 16, 0, 0, 16, 0, 0, 0},
        {16, 0, 0, 0, 16, 16, 0, 0},
        {16, 16, 0, 0, 16, 16, 0, 0}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 16, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 16},
        {0, 0, 0, 16, 0, 0, 0, 16},
        {0, 0, 16, 0, 0, 0, 0, 0},
        {0, 0, 16, 16, 0, 0, 0, 0},
        {0, 0, 16, 0, 0, 0, 0, 16},
        {0, 0, 16, 16, 0, 0, 0, 16},
        {0, 0, 0, 0, 0, 0, 16, 0},
        {0, 0, 0, 16, 0, 0, 16, 0},
        {0, 0, 0, 0, 0, 0, 16, 16},
        {0, 0, 0, 16, 0, 0, 16, 16},
        {0, 0, 16, 0, 0, 0, 16, 0},
        {0, 0, 16, 16, 0, 0, 16, 0},
        {0, 0, 16, 0, 0, 0, 16, 16},
        {0, 0, 16, 16, 0, 0, 16, 16}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 32, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 32, 0, 0},
        {0, 32, 0, 0, 0, 32, 0, 0},
        {32, 0, 0, 0, 0, 0, 0, 0},
        {32, 32, 0, 0, 0, 0, 0, 0},
        {32, 0, 0, 0, 0, 32, 0, 0},
        {32, 32, 0, 0, 0, 32, 0, 0},
        {0, 0, 0, 0, 32, 0, 0, 0},
        {0, 32, 0, 0, 32, 0, 0, 0},
        {0, 0, 0, 0, 32, 32, 0, 0},
        {0, 32, 0, 0, 32, 32, 0, 0},
        {32, 0, 0, 0, 32, 0, 0, 0},
        {32, 32, 0, 0, 32, 0, 0, 0},
        {32, 0, 0, 0, 32, 32, 0, 0},
        {32, 32, 0, 0, 32, 32, 0, 0}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 32, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 32},
        {0, 0, 0, 32, 0, 0, 0, 32},
        {0, 0, 32, 0, 0, 0, 0, 0},
        {0, 0, 32, 32, 0, 0, 0, 0},
        {0, 0, 32, 0, 0, 0, 0, 32},
        {0, 0, 32, 32, 0, 0, 0, 32},
        {0, 0, 0, 0, 0, 0, 32, 0},
        {0, 0, 0, 32, 0, 0, 32, 0},
        {0, 0, 0, 0, 0, 0, 32, 32},
        {0, 0, 0, 32, 0, 0, 32, 32},
        {0, 0, 32, 0, 0, 0, 32, 0},
        {0, 0, 32, 32, 0, 0, 32, 0},
        {0, 0, 32, 0, 0, 0, 32, 32},
        {0, 0, 32, 32, 0, 0, 32, 32}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 64, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 64, 0, 0},
        {0, 64, 0, 0, 0, 64, 0, 0},
        {64, 0, 0, 0, 0, 0, 0, 0},
        {64, 64, 0, 0, 0, 0, 0, 0},
        {64, 0, 0, 0, 0, 64, 0, 0},
        {64, 64, 0, 0, 0, 64, 0, 0},
        {0, 0, 0, 0, 64, 0, 0, 0},
        {0, 64, 0, 0, 64, 0, 0, 0},
        {0, 0, 0, 0, 64, 64, 0, 0},
        {0, 64, 0, 0, 64, 64, 0, 0},
        {64, 0, 0, 0, 64, 0, 0, 0},
        {64, 64, 0, 0, 64, 0, 0, 0},
        {64, 0, 0, 0, 64, 64, 0, 0},
        {64, 64, 0, 0, 64, 64, 0, 0}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 64, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 64},
        {0, 0, 0, 64, 0, 0, 0, 64},
        {0, 0, 64, 0, 0, 0, 0, 0},
        {0, 0, 64, 64, 0, 0, 0, 0},
        {0, 0, 64, 0, 0, 0, 0, 64},
        {0, 0, 64, 64, 0, 0, 0, 64},
        {0, 0, 0, 0, 0, 0, 64, 0},
        {0, 0, 0, 64, 0, 0, 64, 0},
        {0, 0, 0, 0, 0, 0, 64, 64},
        {0, 0, 0, 64, 0, 0, 64, 64},
        {0, 0, 64, 0, 0, 0, 64, 0},
        {0, 0, 64, 64, 0, 0, 64, 0},
        {0, 0, 64, 0, 0, 0, 64, 64},
        {0, 0, 64, 64, 0, 0, 64, 64}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 128, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 128, 0, 0},
        {0, 128, 0, 0, 0, 128, 0, 0},
        {128, 0, 0, 0, 0, 0, 0, 0},
        {128, 128, 0, 0, 0, 0, 0, 0},
        {128, 0, 0, 0, 0, 128, 0, 0},
        {128, 128, 0, 0, 0, 128, 0, 0},
        {0, 0, 0, 0, 128, 0, 0, 0},
        {0, 128, 0, 0, 128, 0, 0, 0},
        {0, 0, 0, 0, 128, 128, 0, 0},
        {0, 128, 0, 0, 128, 128, 0, 0},
        {128, 0, 0, 0, 128, 0, 0, 0},
        {128, 128, 0, 0, 128, 0, 0, 0},
        {128, 0, 0, 0, 128, 128, 0, 0},
        {128, 128, 0, 0, 128, 128, 0, 0}
    },    
    {     
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 128, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 128},
        {0, 0, 0, 128, 0, 0, 0, 128},
        {0, 0, 128, 0, 0, 0, 0, 0},
        {0, 0, 128, 128, 0, 0, 0, 0},
        {0, 0, 128, 0, 0, 0, 0, 128},
        {0, 0, 128, 128, 0, 0, 0, 128},
        {0, 0, 0, 0, 0, 0, 128, 0},
        {0, 0, 0, 128, 0, 0, 128, 0},
        {0, 0, 0, 0, 0, 0, 128, 128},
        {0, 0, 0, 128, 0, 0, 128, 128},
        {0, 0, 128, 0, 0, 0, 128, 0},
        {0, 0, 128, 128, 0, 0, 128, 0},
        {0, 0, 128, 0, 0, 0, 128, 128},
        {0, 0, 128, 128, 0, 0, 128, 128}
    }

};

static unsigned char fperm[16][16][8]= 
{
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 64, 0, 0, 0},
        {0, 0, 0, 0, 0, 64, 0, 0},
        {0, 0, 0, 0, 64, 64, 0, 0},
        {0, 0, 0, 0, 0, 0, 64, 0},
        {0, 0, 0, 0, 64, 0, 64, 0},
        {0, 0, 0, 0, 0, 64, 64, 0},
        {0, 0, 0, 0, 64, 64, 64, 0},
        {0, 0, 0, 0, 0, 0, 0, 64},
        {0, 0, 0, 0, 64, 0, 0, 64},
        {0, 0, 0, 0, 0, 64, 0, 64},
        {0, 0, 0, 0, 64, 64, 0, 64},
        {0, 0, 0, 0, 0, 0, 64, 64},
        {0, 0, 0, 0, 64, 0, 64, 64},
        {0, 0, 0, 0, 0, 64, 64, 64},
        {0, 0, 0, 0, 64, 64, 64, 64}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {64, 0, 0, 0, 0, 0, 0, 0},
        {0, 64, 0, 0, 0, 0, 0, 0},
        {64, 64, 0, 0, 0, 0, 0, 0},
        {0, 0, 64, 0, 0, 0, 0, 0},
        {64, 0, 64, 0, 0, 0, 0, 0},
        {0, 64, 64, 0, 0, 0, 0, 0},
        {64, 64, 64, 0, 0, 0, 0, 0},
        {0, 0, 0, 64, 0, 0, 0, 0},
        {64, 0, 0, 64, 0, 0, 0, 0},
        {0, 64, 0, 64, 0, 0, 0, 0},
        {64, 64, 0, 64, 0, 0, 0, 0},
        {0, 0, 64, 64, 0, 0, 0, 0},
        {64, 0, 64, 64, 0, 0, 0, 0},
        {0, 64, 64, 64, 0, 0, 0, 0},
        {64, 64, 64, 64, 0, 0, 0, 0}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 16, 0, 0, 0},
        {0, 0, 0, 0, 0, 16, 0, 0},
        {0, 0, 0, 0, 16, 16, 0, 0},
        {0, 0, 0, 0, 0, 0, 16, 0},
        {0, 0, 0, 0, 16, 0, 16, 0},
        {0, 0, 0, 0, 0, 16, 16, 0},
        {0, 0, 0, 0, 16, 16, 16, 0},
        {0, 0, 0, 0, 0, 0, 0, 16},
        {0, 0, 0, 0, 16, 0, 0, 16},
        {0, 0, 0, 0, 0, 16, 0, 16},
        {0, 0, 0, 0, 16, 16, 0, 16},
        {0, 0, 0, 0, 0, 0, 16, 16},
        {0, 0, 0, 0, 16, 0, 16, 16},
        {0, 0, 0, 0, 0, 16, 16, 16},
        {0, 0, 0, 0, 16, 16, 16, 16}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {16, 0, 0, 0, 0, 0, 0, 0},
        {0, 16, 0, 0, 0, 0, 0, 0},
        {16, 16, 0, 0, 0, 0, 0, 0},
        {0, 0, 16, 0, 0, 0, 0, 0},
        {16, 0, 16, 0, 0, 0, 0, 0},
        {0, 16, 16, 0, 0, 0, 0, 0},
        {16, 16, 16, 0, 0, 0, 0, 0},
        {0, 0, 0, 16, 0, 0, 0, 0},
        {16, 0, 0, 16, 0, 0, 0, 0},
        {0, 16, 0, 16, 0, 0, 0, 0},
        {16, 16, 0, 16, 0, 0, 0, 0},
        {0, 0, 16, 16, 0, 0, 0, 0},
        {16, 0, 16, 16, 0, 0, 0, 0},
        {0, 16, 16, 16, 0, 0, 0, 0},
        {16, 16, 16, 16, 0, 0, 0, 0}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 4, 0, 0, 0},
        {0, 0, 0, 0, 0, 4, 0, 0},
        {0, 0, 0, 0, 4, 4, 0, 0},
        {0, 0, 0, 0, 0, 0, 4, 0},
        {0, 0, 0, 0, 4, 0, 4, 0},
        {0, 0, 0, 0, 0, 4, 4, 0},
        {0, 0, 0, 0, 4, 4, 4, 0},
        {0, 0, 0, 0, 0, 0, 0, 4},
        {0, 0, 0, 0, 4, 0, 0, 4},
        {0, 0, 0, 0, 0, 4, 0, 4},
        {0, 0, 0, 0, 4, 4, 0, 4},
        {0, 0, 0, 0, 0, 0, 4, 4},
        {0, 0, 0, 0, 4, 0, 4, 4},
        {0, 0, 0, 0, 0, 4, 4, 4},
        {0, 0, 0, 0, 4, 4, 4, 4}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {4, 0, 0, 0, 0, 0, 0, 0},
        {0, 4, 0, 0, 0, 0, 0, 0},
        {4, 4, 0, 0, 0, 0, 0, 0},
        {0, 0, 4, 0, 0, 0, 0, 0},
        {4, 0, 4, 0, 0, 0, 0, 0},
        {0, 4, 4, 0, 0, 0, 0, 0},
        {4, 4, 4, 0, 0, 0, 0, 0},
        {0, 0, 0, 4, 0, 0, 0, 0},
        {4, 0, 0, 4, 0, 0, 0, 0},
        {0, 4, 0, 4, 0, 0, 0, 0},
        {4, 4, 0, 4, 0, 0, 0, 0},
        {0, 0, 4, 4, 0, 0, 0, 0},
        {4, 0, 4, 4, 0, 0, 0, 0},
        {0, 4, 4, 4, 0, 0, 0, 0},
        {4, 4, 4, 4, 0, 0, 0, 0}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 1, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, 1, 1, 0, 0},
        {0, 0, 0, 0, 0, 0, 1, 0},
        {0, 0, 0, 0, 1, 0, 1, 0},
        {0, 0, 0, 0, 0, 1, 1, 0},
        {0, 0, 0, 0, 1, 1, 1, 0},
        {0, 0, 0, 0, 0, 0, 0, 1},
        {0, 0, 0, 0, 1, 0, 0, 1},
        {0, 0, 0, 0, 0, 1, 0, 1},
        {0, 0, 0, 0, 1, 1, 0, 1},
        {0, 0, 0, 0, 0, 0, 1, 1},
        {0, 0, 0, 0, 1, 0, 1, 1},
        {0, 0, 0, 0, 0, 1, 1, 1},
        {0, 0, 0, 0, 1, 1, 1, 1}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {1, 0, 0, 0, 0, 0, 0, 0},
        {0, 1, 0, 0, 0, 0, 0, 0},
        {1, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 1, 0, 0, 0, 0, 0},
        {1, 0, 1, 0, 0, 0, 0, 0},
        {0, 1, 1, 0, 0, 0, 0, 0},
        {1, 1, 1, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 0},
        {1, 0, 0, 1, 0, 0, 0, 0},
        {0, 1, 0, 1, 0, 0, 0, 0},
        {1, 1, 0, 1, 0, 0, 0, 0},
        {0, 0, 1, 1, 0, 0, 0, 0},
        {1, 0, 1, 1, 0, 0, 0, 0},
        {0, 1, 1, 1, 0, 0, 0, 0},
        {1, 1, 1, 1, 0, 0, 0, 0}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 128, 0, 0, 0},
        {0, 0, 0, 0, 0, 128, 0, 0},
        {0, 0, 0, 0, 128, 128, 0, 0},
        {0, 0, 0, 0, 0, 0, 128, 0},
        {0, 0, 0, 0, 128, 0, 128, 0},
        {0, 0, 0, 0, 0, 128, 128, 0},
        {0, 0, 0, 0, 128, 128, 128, 0},
        {0, 0, 0, 0, 0, 0, 0, 128},
        {0, 0, 0, 0, 128, 0, 0, 128},
        {0, 0, 0, 0, 0, 128, 0, 128},
        {0, 0, 0, 0, 128, 128, 0, 128},
        {0, 0, 0, 0, 0, 0, 128, 128},
        {0, 0, 0, 0, 128, 0, 128, 128},
        {0, 0, 0, 0, 0, 128, 128, 128},
        {0, 0, 0, 0, 128, 128, 128, 128}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {128, 0, 0, 0, 0, 0, 0, 0},
        {0, 128, 0, 0, 0, 0, 0, 0},
        {128, 128, 0, 0, 0, 0, 0, 0},
        {0, 0, 128, 0, 0, 0, 0, 0},
        {128, 0, 128, 0, 0, 0, 0, 0},
        {0, 128, 128, 0, 0, 0, 0, 0},
        {128, 128, 128, 0, 0, 0, 0, 0},
        {0, 0, 0, 128, 0, 0, 0, 0},
        {128, 0, 0, 128, 0, 0, 0, 0},
        {0, 128, 0, 128, 0, 0, 0, 0},
        {128, 128, 0, 128, 0, 0, 0, 0},
        {0, 0, 128, 128, 0, 0, 0, 0},
        {128, 0, 128, 128, 0, 0, 0, 0},
        {0, 128, 128, 128, 0, 0, 0, 0},
        {128, 128, 128, 128, 0, 0, 0, 0}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 32, 0, 0, 0},
        {0, 0, 0, 0, 0, 32, 0, 0},
        {0, 0, 0, 0, 32, 32, 0, 0},
        {0, 0, 0, 0, 0, 0, 32, 0},
        {0, 0, 0, 0, 32, 0, 32, 0},
        {0, 0, 0, 0, 0, 32, 32, 0},
        {0, 0, 0, 0, 32, 32, 32, 0},
        {0, 0, 0, 0, 0, 0, 0, 32},
        {0, 0, 0, 0, 32, 0, 0, 32},
        {0, 0, 0, 0, 0, 32, 0, 32},
        {0, 0, 0, 0, 32, 32, 0, 32},
        {0, 0, 0, 0, 0, 0, 32, 32},
        {0, 0, 0, 0, 32, 0, 32, 32},
        {0, 0, 0, 0, 0, 32, 32, 32},
        {0, 0, 0, 0, 32, 32, 32, 32}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {32, 0, 0, 0, 0, 0, 0, 0},
        {0, 32, 0, 0, 0, 0, 0, 0},
        {32, 32, 0, 0, 0, 0, 0, 0},
        {0, 0, 32, 0, 0, 0, 0, 0},
        {32, 0, 32, 0, 0, 0, 0, 0},
        {0, 32, 32, 0, 0, 0, 0, 0},
        {32, 32, 32, 0, 0, 0, 0, 0},
        {0, 0, 0, 32, 0, 0, 0, 0},
        {32, 0, 0, 32, 0, 0, 0, 0},
        {0, 32, 0, 32, 0, 0, 0, 0},
        {32, 32, 0, 32, 0, 0, 0, 0},
        {0, 0, 32, 32, 0, 0, 0, 0},
        {32, 0, 32, 32, 0, 0, 0, 0},
        {0, 32, 32, 32, 0, 0, 0, 0},
        {32, 32, 32, 32, 0, 0, 0, 0}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 8, 0, 0, 0},
        {0, 0, 0, 0, 0, 8, 0, 0},
        {0, 0, 0, 0, 8, 8, 0, 0},
        {0, 0, 0, 0, 0, 0, 8, 0},
        {0, 0, 0, 0, 8, 0, 8, 0},
        {0, 0, 0, 0, 0, 8, 8, 0},
        {0, 0, 0, 0, 8, 8, 8, 0},
        {0, 0, 0, 0, 0, 0, 0, 8},
        {0, 0, 0, 0, 8, 0, 0, 8},
        {0, 0, 0, 0, 0, 8, 0, 8},
        {0, 0, 0, 0, 8, 8, 0, 8},
        {0, 0, 0, 0, 0, 0, 8, 8},
        {0, 0, 0, 0, 8, 0, 8, 8},
        {0, 0, 0, 0, 0, 8, 8, 8},
        {0, 0, 0, 0, 8, 8, 8, 8}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {8, 0, 0, 0, 0, 0, 0, 0},
        {0, 8, 0, 0, 0, 0, 0, 0},
        {8, 8, 0, 0, 0, 0, 0, 0},
        {0, 0, 8, 0, 0, 0, 0, 0},
        {8, 0, 8, 0, 0, 0, 0, 0},
        {0, 8, 8, 0, 0, 0, 0, 0},
        {8, 8, 8, 0, 0, 0, 0, 0},
        {0, 0, 0, 8, 0, 0, 0, 0},
        {8, 0, 0, 8, 0, 0, 0, 0},
        {0, 8, 0, 8, 0, 0, 0, 0},
        {8, 8, 0, 8, 0, 0, 0, 0},
        {0, 0, 8, 8, 0, 0, 0, 0},
        {8, 0, 8, 8, 0, 0, 0, 0},
        {0, 8, 8, 8, 0, 0, 0, 0},
        {8, 8, 8, 8, 0, 0, 0, 0}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 2, 0, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 0},
        {0, 0, 0, 0, 2, 2, 0, 0},
        {0, 0, 0, 0, 0, 0, 2, 0},
        {0, 0, 0, 0, 2, 0, 2, 0},
        {0, 0, 0, 0, 0, 2, 2, 0},
        {0, 0, 0, 0, 2, 2, 2, 0},
        {0, 0, 0, 0, 0, 0, 0, 2},
        {0, 0, 0, 0, 2, 0, 0, 2},
        {0, 0, 0, 0, 0, 2, 0, 2},
        {0, 0, 0, 0, 2, 2, 0, 2},
        {0, 0, 0, 0, 0, 0, 2, 2},
        {0, 0, 0, 0, 2, 0, 2, 2},
        {0, 0, 0, 0, 0, 2, 2, 2},
        {0, 0, 0, 0, 2, 2, 2, 2}
    },
    {
        {0, 0, 0, 0, 0, 0, 0, 0},
        {2, 0, 0, 0, 0, 0, 0, 0},
        {0, 2, 0, 0, 0, 0, 0, 0},
        {2, 2, 0, 0, 0, 0, 0, 0},
        {0, 0, 2, 0, 0, 0, 0, 0},
        {2, 0, 2, 0, 0, 0, 0, 0},
        {0, 2, 2, 0, 0, 0, 0, 0},
        {2, 2, 2, 0, 0, 0, 0, 0},
        {0, 0, 0, 2, 0, 0, 0, 0},
        {2, 0, 0, 2, 0, 0, 0, 0},
        {0, 2, 0, 2, 0, 0, 0, 0},
        {2, 2, 0, 2, 0, 0, 0, 0},
        {0, 0, 2, 2, 0, 0, 0, 0},
        {2, 0, 2, 2, 0, 0, 0, 0},
        {0, 2, 2, 2, 0, 0, 0, 0},
        {2, 2, 2, 2, 0, 0, 0, 0}
    }

};

//bit 0 is left-most in byte
static int bytebit[] = {
    0200,0100,040,020,010,04,02,01
};

#if 0
static int nibblebit[] = {
     010,04,02,01
};
#endif

//Set key (initialize key schedule array)

static void des_setkey(char *subkey, const char *key)
{
    unsigned char (*kn)[8] = (unsigned char (*)[8]) subkey;
    char pc1m[56];        //place to modify pc1 into
    char pcr[56];            //place to rotate pc1 into
    int i,j,l;
    int m;

    //Clear key schedule
    memset(subkey, 0, 16*8);

    for (j=0; j<56; j++) {        //convert pc1 to bits of key
        l=pc1[j]-1;        //integer bit location 
        m = l & 07;        //find bit        
        pc1m[j]=(key[l>>3] &    //find which key byte l is in
            bytebit[m])    //and which bit of that byte
            ? 1 : 0;    //and store 1-bit result
    }
    for (i=0; i<16; i++) {        //key chunk for each iteration
        for (j=0; j<56; j++)    //rotate pc1 the right amount
            pcr[j] = pc1m[(l=j+totrot[i])<(j<28? 28 : 56) ? l: l-28];
            //rotate left and right halves independently
        for (j=0; j<48; j++){    //select bits individually
            //check bit that goes to kn[j]
            if (pcr[pc2[j]-1]){    
                //mask it in if it's there
                l= j % 6;
                kn[i][j/6] |= bytebit[l] >> 2;
            }
        }
    }
}


//Permute inblock with perm
static void permute(char *inblock,char perm[16][16][8],char *outblock)
{
    int i,j;
    char *ib, *ob;     //ptr to input or output block
    char *p, *q;

    //Clear output block    
    memset(outblock, 0, 8);

    ib = inblock;
    for (j = 0; j < 16; j += 2, ib++) { //for each input nibble
        ob = outblock;
        p = perm[j][(*ib >> 4) & 017];
        q = perm[j + 1][*ib & 017];
        for (i = 8; i != 0; i--){   //and each output byte
            *ob++ |= *p++ | *q++;    //OR the masks together*/
        }
    }
}

//The nonlinear function f(r,k), the heart of DES
static int f(unsigned int r,const unsigned char subkey[8])
{
    unsigned int rval,rt;
    //Run E(R) ^ K through the combined S & P boxes
    //This code takes advantage of a convenient regularity in
    //E, namely that each group of 6 bits in E(R) feeding
    //a single S-box is a contiguous segment of R.
    
    rt = (r >> 1) | ((r & 1) ? 0x80000000 : 0);
    rval = 0;
    rval |= sp_[0][((rt >> 26) ^ *subkey++) & 0x3f];
    rval |= sp_[1][((rt >> 22) ^ *subkey++) & 0x3f];
    rval |= sp_[2][((rt >> 18) ^ *subkey++) & 0x3f];
    rval |= sp_[3][((rt >> 14) ^ *subkey++) & 0x3f];
    rval |= sp_[4][((rt >> 10) ^ *subkey++) & 0x3f];
    rval |= sp_[5][((rt >> 6) ^ *subkey++) & 0x3f];
    rval |= sp_[6][((rt >> 2) ^ *subkey++) & 0x3f];
    rt = (r << 1) | ((r & 0x80000000) ? 1 : 0);
    rval |= sp_[7][(rt ^ *subkey) & 0x3f];

    return rval;
}

//Do one DES cipher round
static void round(int num,unsigned int *block, const unsigned char (*kn)[8])
{
    //The rounds are numbered from 0 to 15. On even rounds
    //the right half is fed to f() and the result exclusive-ORs
    //the left half; on odd rounds the reverse is done.
    
    if(num & 1){
        block[1] ^= f(block[0],kn[num]);
    } else {
        block[0] ^= f(block[1],kn[num]);
    }
}          

//In-place encryption of 64-bit block
static void endes(int mode, char *block, const char *subkey)
{
    int i;
    unsigned int work[2];        //Working data storage
    int tmp;

    if(mode == 0)
        permute(block,(char (*)[16][8])iperm,(char *)work);    //Initial Permutation
    else
        memcpy((char*)work, block, 8);

    work[0] = htonl(work[0]);
    work[1] = htonl(work[1]);

    //Do the 16 rounds
    for (i=0; i<16; i++)
        round(i,work, (unsigned char (*)[8]) subkey);

    //Left/right half swap
    tmp = work[0];
    work[0] = work[1];    
    work[1] = tmp;

    work[0] = htonl(work[0]);
    work[1] = htonl(work[1]);

    if(mode == 0)
        permute((char *)work,(char (*)[16][8])fperm,block);    //Inverse initial permutation
    else
        memcpy(block, (char*)work, 8);
}

//In-place decryption of 64-bit block
static void dedes(int mode, char *block, const char *subkey)
{
    int i;
    unsigned int work[2];    //Working data storage
    int tmp;

    if(mode == 0)
        permute(block,(char (*)[16][8])iperm,(char *)work);    //Initial permutation
    else
        memcpy((char *)work, block, 8);

    work[0] = htonl(work[0]);
    work[1] = htonl(work[1]);

    //Left/right half swap
    tmp = work[0];
    work[0] = work[1];    
    work[1] = tmp;

    //Do the 16 rounds in reverse order
    for (i=15; i >= 0; i--)
        round(i,work, (unsigned char (*)[8]) subkey);

    work[0] = htonl(work[0]);
    work[1] = htonl(work[1]);

    if(mode == 0)
        permute((char *)work,(char (*)[16][8])fperm,block);    //Inverse initial permutation
    else
        memcpy(block, (char*)work, 8);
}

std::string CDesEncrypt::SetKey(const std::string& key)
{
    if(m_mode == 2) return key;

    char temp[128];
    des_setkey(temp, key.data());
    return std::string(temp, 128);
}

std::string CDesEncrypt::Encrypt(const std::string& data, const std::string& desKey)
{
    std::string result;
    int len = (int)data.length();
    result.reserve((len & 8) + 8);
    char temp[8];
    const char *ptr = data.data();
    while(len >= 8)
    {
        memcpy(temp, ptr, 8);
        ptr += 8;
        len -= 8;
        endes(m_mode, temp, desKey.data());
        result.append(temp, 8);
    }
    if( len > 0)
    {
        memset(temp, 0, 8);
        memcpy(temp, ptr, len);
        endes(m_mode, temp, desKey.data());
        result.append(temp, 8);
    }
    return result;
}

std::string CDesEncrypt::Decrypt(const std::string& data, const std::string& desKey)
{
    std::string result;
    int len = (int)data.length();
    result.reserve(len);
    char temp[8];
    const char *ptr = data.data();
    while(len >= 8)
    {
        memcpy(temp, ptr, 8);
        ptr += 8;
        len -= 8;
        dedes(m_mode, temp, desKey.data());
        result.append(temp, 8);
    }
    return result;
}

void CDesEncrypt::Encrypt(std::string& data, const std::string& desKey, std::string::size_type offset)
{
    if(offset >= data.length()) return;
    int len = (int)(data.length() - offset);
    data.reserve((data.length() & 8) + 8);
    char temp[8];
    while(len >= 8)
    {
        data.copy(temp, 8, offset);
        endes(m_mode, temp, desKey.data());
        data.replace( offset, 8, temp, 8);
        offset += 8;
        len -= 8;
    }
    if( len > 0)
    {
        memset(temp, 0, 8);
        data.copy(temp, len, offset);
        endes(m_mode, temp, desKey.data());
        data.replace( offset, 8, temp, 8);
    }
}

void CDesEncrypt::Decrypt(std::string& data, const std::string& desKey, std::string::size_type offset)
{
    int len = (int)(data.length() - offset);
    char temp[8];
    while(len >= 8)
    {
        data.copy(temp, 8, offset);
        dedes(m_mode, temp, desKey.data());
        data.replace(offset, 8, temp, 8);
        offset += 8;
        len -= 8;
    }
}

